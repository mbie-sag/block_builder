# Copyright (C) 2020 Software AG, Darmstadt, Germany and/or its licensors
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
#		http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
#
# Use of this action implies agreement to the terms for using Apama Community Edition - http://www.apamacommunity.com/terms-conditions/

name: 'Setup Apama'
description: 'Install Software AG Apama Community Edition and add it to your GitHub Actions environment'
author: Software AG
inputs:
  apama-version:
    description: 'The 4 digit version to install from https://downloads.apamacommunity.com/apama, e.g. 10.5.3.2'
    required: true

runs:
  using: "composite"
  steps: 
      - name: Install Apama Community Edition
        shell: bash
        run: |
          echo Use of this action implies agreement to the terms for using Apama Community Edition
          echo See: http://www.apamacommunity.com/terms-conditions/
          echo
          
          APAMA_CACHE_TAR=~/cached-apama-installation.tar
          if [[ ${{runner.os}} = Windows ]]; then
            _SAG_INSTALL_PATH=c:\\SoftwareAG
            DOWNLOAD_PLATFORM=amd64_win
          else
            _SAG_INSTALL_PATH=/opt/softwareag
            DOWNLOAD_PLATFORM=amd64_linux
          fi
          
          if [[ -f $APAMA_CACHE_TAR ]]; then
            echo Unpacking Apama installation from cache at $APAMA_CACHE_TAR
            
            mkdir $_SAG_INSTALL_PATH
            cd $_SAG_INSTALL_PATH
            time tar -xf $APAMA_CACHE_TAR
            # Check it unpacked correctly
            ls $_SAG_INSTALL_PATH/Apama
          else
            echo No installation found in cache $APAMA_CACHE_TAR
            # Cache miss - need to install it
            mkdir ../apama-installer
            cd ../apama-installer
            DOWNLOAD_URL=https://downloads.apamacommunity.com/apama/${{ inputs.apama-version }}/apama_${{ inputs.apama-version }}_$DOWNLOAD_PLATFORM.zip
            echo Downloading from $DOWNLOAD_URL
            # First use head to check the URL is valid (gives a more helpful message if it doesn't)
            curl --retry 2 --head $DOWNLOAD_URL
            curl --retry 2 --output apama-installer.zip $DOWNLOAD_URL
            unzip -q apama-installer.zip
            mv apama_*/* ./
            
            cat > apama-installer-script.txt << EOF
          LicenseAgree=Accept
          InstallProducts=e2ei/11/.latest/Apama/PAMServer
          PAM.Work.Directory.ID=__VERSION1__,$_SAG_INSTALL_PATH/apama-work
          InstallDir=$_SAG_INSTALL_PATH
          sagInstallerLogFile=softwareag-installer.log
          imageFile=data/SAGImage.zip
          EOF
            # Need to escape backslashes as it's effectively a properties file
            sed -i 's/\\/\\\\/g' apama-installer-script.txt
            
            echo Running installer with script:
            cat apama-installer-script.txt
            
            ./install -readScript apama-installer-script.txt -console -scriptErrorInteract no
            
            # Double-check that it was installed
            ls $_SAG_INSTALL_PATH/Apama/bin > /dev/null
            
            # Archive a pristine copy of the installation for the cache (before running any tests); 
            # no need to compress as the cache already does that
            cd $_SAG_INSTALL_PATH
            tar -cf $APAMA_CACHE_TAR *
          fi
          cd ~
          # Until Apama 10.7 we need to explicitly enable color from GitHub Actions 
          # (and disable colorama on windows which would replace the escape codes)
          echo PYSYS_COLOR=true >> $GITHUB_ENV
          echo PYSYS_DISABLE_COLORAMA=true >> $GITHUB_ENV
          
          # Once installed, copy the entire apama environment into the GH Actions env so it can be used in any type of 
          # shell (bash/cmd/PS etc). We also set an extra env var APAMA_PYSYS so user can run pysys from any shell. 
          if [[ ${{runner.os}} = Windows ]]; then
            echo "APAMA_PYSYS=pysys.cmd" >> $GITHUB_ENV
            echo "APAMA_HOME=`cygpath --windows $_SAG_INSTALL_PATH/Apama`" >> $GITHUB_ENV
            # For Windows we need to do it all in a separate (cmd) step otherwise extra vars from Git Bash will leak in
          else
            echo "APAMA_PYSYS=pysys" >> $GITHUB_ENV
            . $_SAG_INSTALL_PATH/Apama/bin/apama_env
            env | sort >> apama.env
            # This will replace the environment to point at Apama rather than GH Actions pre-installed tools, which ensures
            # the right version of Ant/Java etc is used
            cat apama.env >> $GITHUB_ENV
          fi
